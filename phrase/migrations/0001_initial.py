# Generated by Django 5.2 on 2025-07-13 01:21

import django.core.validators
import django.db.models.deletion
import phrase.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CacheInvalidation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_key', models.CharField(max_length=250, unique=True)),
                ('model_name', models.CharField(max_length=100)),
                ('instance_id', models.PositiveIntegerField()),
                ('action', models.CharField(choices=[('create', '생성'), ('update', '수정'), ('delete', '삭제')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'indexes': [models.Index(fields=['model_name', 'instance_id'], name='phrase_cach_model_n_cede31_idx'), models.Index(fields=['-created_at'], name='phrase_cach_created_b236ec_idx')],
            },
        ),
        migrations.CreateModel(
            name='MovieTable',
            fields=[
                ('id', models.BigAutoField(db_index=True, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='생성시간')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='수정시간')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='활성 상태')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='메타데이터')),
                ('movie_title', phrase.models.OptimizedCharField(max_length=300, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='영화 제목')),
                ('original_title', phrase.models.OptimizedCharField(blank=True, max_length=300, verbose_name='원제목')),
                ('release_year', phrase.models.OptimizedCharField(db_index=True, default='1004', max_length=4, validators=[django.core.validators.MinLengthValidator(4), django.core.validators.MaxLengthValidator(4)], verbose_name='개봉연도')),
                ('production_country', phrase.models.OptimizedCharField(db_index=True, default='지구', max_length=100, verbose_name='제작국가')),
                ('director', phrase.models.OptimizedCharField(default='ahading', max_length=300, verbose_name='감독')),
                ('genre', models.CharField(blank=True, max_length=200, verbose_name='장르')),
                ('imdb_rating', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='IMDB 평점')),
                ('imdb_url', phrase.models.SecureURLField(blank=True, max_length=600, null=True, validators=[django.core.validators.URLValidator(schemes=['http', 'https']), django.core.validators.URLValidator(schemes=['http', 'https'])], verbose_name='IMDB URL')),
                ('poster_url', phrase.models.SecureURLField(blank=True, max_length=600, null=True, validators=[django.core.validators.URLValidator(schemes=['http', 'https']), django.core.validators.URLValidator(schemes=['http', 'https'])], verbose_name='포스터 URL')),
                ('poster_image', models.ImageField(blank=True, max_length=500, null=True, upload_to=phrase.models.get_poster_upload_path, verbose_name='포스터 이미지')),
                ('poster_image_path', models.CharField(blank=True, max_length=600, verbose_name='포스터 경로')),
                ('data_quality', models.CharField(choices=[('verified', '검증됨'), ('pending', '검토중'), ('incomplete', '불완전'), ('error', '오류')], default='pending', max_length=20, verbose_name='데이터 품질')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='조회수')),
                ('like_count', models.PositiveIntegerField(default=0, verbose_name='좋아요 수')),
            ],
            options={
                'verbose_name': '영화',
                'verbose_name_plural': '영화들',
                'db_table': 'movie_table',
                'indexes': [models.Index(fields=['movie_title'], name='movie_table_movie_t_6b9c6c_idx'), models.Index(fields=['release_year'], name='movie_table_release_7db6cb_idx'), models.Index(fields=['director'], name='movie_table_directo_da9783_idx'), models.Index(fields=['genre'], name='movie_table_genre_a4b892_idx'), models.Index(fields=['imdb_rating'], name='movie_table_imdb_ra_b65fc4_idx'), models.Index(fields=['data_quality'], name='movie_table_data_qu_b1cd12_idx'), models.Index(fields=['-view_count'], name='movie_table_view_co_b2faac_idx'), models.Index(fields=['movie_title', 'release_year'], name='movie_table_movie_t_57370c_idx'), models.Index(fields=['is_active', 'data_quality'], name='movie_table_is_acti_9c4b19_idx'), models.Index(fields=['-created_at', 'is_active'], name='movie_table_created_dbad42_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('view_count__gte', 0)), name='positive_view_count'), models.CheckConstraint(condition=models.Q(('like_count__gte', 0)), name='positive_like_count'), models.CheckConstraint(condition=models.Q(('imdb_rating__gte', 0), ('imdb_rating__lte', 10)), name='valid_imdb_rating')],
                'unique_together': {('movie_title', 'release_year', 'director')},
            },
        ),
        migrations.CreateModel(
            name='DialogueTable',
            fields=[
                ('id', models.BigAutoField(db_index=True, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='생성시간')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='수정시간')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='활성 상태')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='메타데이터')),
                ('dialogue_phrase', models.TextField(validators=[django.core.validators.MinLengthValidator(1)], verbose_name='영어 대사')),
                ('dialogue_phrase_ko', models.TextField(blank=True, null=True, verbose_name='한글 대사')),
                ('dialogue_phrase_ja', models.TextField(blank=True, null=True, verbose_name='일본어 대사')),
                ('dialogue_phrase_zh', models.TextField(blank=True, null=True, verbose_name='중국어 대사')),
                ('dialogue_start_time', models.CharField(max_length=20, verbose_name='시작 시간')),
                ('dialogue_end_time', models.CharField(blank=True, max_length=20, verbose_name='종료 시간')),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True, verbose_name='길이(초)')),
                ('video_url', phrase.models.SecureURLField(max_length=600, validators=[django.core.validators.URLValidator(schemes=['http', 'https']), django.core.validators.URLValidator(schemes=['http', 'https'])], verbose_name='비디오 URL')),
                ('video_file', models.FileField(blank=True, max_length=500, null=True, upload_to=phrase.models.get_video_upload_path, verbose_name='비디오 파일')),
                ('video_file_path', models.CharField(blank=True, max_length=600, verbose_name='비디오 파일 경로')),
                ('file_size_bytes', models.PositiveBigIntegerField(blank=True, null=True, verbose_name='파일 크기(바이트)')),
                ('video_quality', models.CharField(choices=[('720p', '720p HD'), ('480p', '480p SD'), ('360p', '360p'), ('240p', '240p'), ('unknown', '알 수 없음')], default='unknown', max_length=20, verbose_name='비디오 품질')),
                ('translation_method', models.CharField(choices=[('manual', '수동 번역'), ('api_auto', 'API 자동번역'), ('ai_improved', 'AI 개선번역'), ('user_submitted', '사용자 제공'), ('unknown', '알 수 없음')], default='unknown', max_length=20, verbose_name='번역 방식')),
                ('translation_quality', models.CharField(choices=[('excellent', '우수'), ('good', '양호'), ('fair', '보통'), ('poor', '미흡'), ('needs_review', '검토 필요')], default='fair', max_length=20, verbose_name='번역 품질')),
                ('play_count', models.PositiveIntegerField(default=0, verbose_name='재생 횟수')),
                ('like_count', models.PositiveIntegerField(default=0, verbose_name='좋아요 수')),
                ('search_vector', models.TextField(blank=True, help_text='전문 검색을 위한 정규화된 텍스트', verbose_name='검색 벡터')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dialogues', to='phrase.movietable', verbose_name='영화')),
            ],
            options={
                'verbose_name': '영화 대사',
                'verbose_name_plural': '영화 대사들',
                'db_table': 'dialogue_table',
            },
        ),
        migrations.CreateModel(
            name='RequestTable',
            fields=[
                ('id', models.BigAutoField(db_index=True, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='생성시간')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='수정시간')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='활성 상태')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='메타데이터')),
                ('request_phrase', models.CharField(db_index=True, max_length=500, unique=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(500)], verbose_name='요청구문')),
                ('request_korean', phrase.models.OptimizedCharField(blank=True, max_length=500, null=True, validators=[django.core.validators.MaxLengthValidator(500)], verbose_name='요청한글')),
                ('search_count', models.PositiveIntegerField(default=1, verbose_name='검색 횟수')),
                ('last_searched_at', models.DateTimeField(auto_now=True, verbose_name='마지막 검색 시간')),
                ('result_count', models.PositiveIntegerField(default=0, verbose_name='검색 결과 수')),
                ('translation_quality', models.CharField(choices=[('excellent', '우수'), ('good', '양호'), ('fair', '보통'), ('poor', '미흡'), ('unknown', '미확인')], default='unknown', max_length=20, verbose_name='번역 품질')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='요청 IP')),
                ('user_agent', models.TextField(blank=True, max_length=1000, verbose_name='사용자 에이전트')),
            ],
            options={
                'verbose_name': '검색 요청',
                'verbose_name_plural': '검색 요청들',
                'db_table': 'request_table',
                'indexes': [models.Index(fields=['request_phrase'], name='request_tab_request_8fbc58_idx'), models.Index(fields=['request_korean'], name='request_tab_request_394199_idx'), models.Index(fields=['search_count', '-last_searched_at'], name='request_tab_search__bd5e25_idx'), models.Index(fields=['-last_searched_at'], name='request_tab_last_se_d2dde4_idx'), models.Index(fields=['translation_quality'], name='request_tab_transla_5497aa_idx'), models.Index(fields=['is_active', '-search_count'], name='request_tab_is_acti_00e82b_idx'), models.Index(fields=['created_at', 'is_active'], name='request_tab_created_5a6457_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('search_count__gte', 0)), name='positive_search_count'), models.CheckConstraint(condition=models.Q(('result_count__gte', 0)), name='positive_result_count')],
            },
        ),
        migrations.CreateModel(
            name='UserSearchQuery',
            fields=[
                ('id', models.BigAutoField(db_index=True, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='생성시간')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='수정시간')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='활성 상태')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='메타데이터')),
                ('session_key', models.CharField(db_index=True, max_length=40, verbose_name='세션 키')),
                ('original_query', phrase.models.OptimizedCharField(db_index=True, max_length=500, verbose_name='원본 검색어')),
                ('translated_query', phrase.models.OptimizedCharField(blank=True, max_length=500, null=True, verbose_name='번역된 검색어')),
                ('search_count', models.PositiveIntegerField(default=1, verbose_name='검색 횟수')),
                ('result_count', models.PositiveIntegerField(default=0, verbose_name='결과 수')),
                ('has_results', models.BooleanField(default=False, verbose_name='결과 있음')),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True, verbose_name='응답 시간(ms)')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP 주소')),
                ('user_agent', models.TextField(blank=True, verbose_name='사용자 에이전트')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
        ),
        migrations.CreateModel(
            name='UserSearchResult',
            fields=[
                ('id', models.BigAutoField(db_index=True, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='생성시간')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='수정시간')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='활성 상태')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='메타데이터')),
                ('relevance_score', models.FloatField(default=1.0, verbose_name='관련성 점수')),
                ('click_position', models.PositiveIntegerField(verbose_name='클릭 위치')),
                ('dialogue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='search_results', to='phrase.dialoguetable')),
                ('search_query', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='phrase.usersearchquery')),
            ],
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['dialogue_phrase'], name='dialogue_ta_dialogu_bbc8a4_idx'),
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['dialogue_phrase_ko'], name='dialogue_ta_dialogu_91ad8a_idx'),
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['video_url'], name='dialogue_ta_video_u_3900ed_idx'),
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['dialogue_start_time'], name='dialogue_ta_dialogu_19a519_idx'),
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['translation_method'], name='dialogue_ta_transla_cf6e73_idx'),
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['translation_quality'], name='dialogue_ta_transla_666ef2_idx'),
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['-play_count'], name='dialogue_ta_play_co_32fe8e_idx'),
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['search_vector'], name='dialogue_ta_search__be7c2f_idx'),
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['movie', 'dialogue_start_time'], name='dialogue_ta_movie_i_558a9b_idx'),
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['movie', '-created_at'], name='dialogue_ta_movie_i_93de6f_idx'),
        ),
        migrations.AddIndex(
            model_name='dialoguetable',
            index=models.Index(fields=['is_active', 'translation_quality'], name='dialogue_ta_is_acti_142560_idx'),
        ),
        migrations.AddConstraint(
            model_name='dialoguetable',
            constraint=models.CheckConstraint(condition=models.Q(('play_count__gte', 0)), name='positive_play_count'),
        ),
        migrations.AddConstraint(
            model_name='dialoguetable',
            constraint=models.CheckConstraint(condition=models.Q(('like_count__gte', 0)), name='positive_dialogue_like_count'),
        ),
        migrations.AddConstraint(
            model_name='dialoguetable',
            constraint=models.CheckConstraint(condition=models.Q(('duration_seconds__gte', 0)), name='positive_duration'),
        ),
        migrations.AddIndex(
            model_name='usersearchquery',
            index=models.Index(fields=['original_query'], name='phrase_user_origina_6f8d93_idx'),
        ),
        migrations.AddIndex(
            model_name='usersearchquery',
            index=models.Index(fields=['session_key', '-created_at'], name='phrase_user_session_a8570c_idx'),
        ),
        migrations.AddIndex(
            model_name='usersearchquery',
            index=models.Index(fields=['-search_count'], name='phrase_user_search__a60071_idx'),
        ),
        migrations.AddIndex(
            model_name='usersearchquery',
            index=models.Index(fields=['has_results', '-created_at'], name='phrase_user_has_res_096b6a_idx'),
        ),
        migrations.AddIndex(
            model_name='usersearchresult',
            index=models.Index(fields=['-relevance_score'], name='phrase_user_relevan_766017_idx'),
        ),
        migrations.AddIndex(
            model_name='usersearchresult',
            index=models.Index(fields=['click_position'], name='phrase_user_click_p_af0d6b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usersearchresult',
            unique_together={('search_query', 'dialogue')},
        ),
    ]
